version: '3.8'

services:
  # Application services
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    image: smartsports-backend:latest
    container_name: smartsports-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - MTN_MOMO_SUBSCRIPTION_KEY=${MTN_MOMO_SUBSCRIPTION_KEY}
      - MTN_MOMO_USER_ID=${MTN_MOMO_USER_ID}
      - MTN_MOMO_API_KEY=${MTN_MOMO_API_KEY}
      - AIRTEL_MONEY_CLIENT_ID=${AIRTEL_MONEY_CLIENT_ID}
      - AIRTEL_MONEY_CLIENT_SECRET=${AIRTEL_MONEY_CLIENT_SECRET}
      - RSWITCH_API_KEY=${RSWITCH_API_KEY}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
    ports:
      - "3000:3000"
    depends_on:
      - postgres-primary
      - redis-primary
      - pgbouncer
    networks:
      - smartsports-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Load balancer
  nginx:
    image: nginx:alpine
    container_name: smartsports-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - smartsports-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # Primary PostgreSQL database
  postgres-primary:
    image: postgres:15-alpine
    container_name: smartsports-postgres-primary
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./scripts/init-replication.sh:/docker-entrypoint-initdb.d/init-replication.sh
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
    ports:
      - "5432:5432"
    networks:
      - smartsports-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Read replica PostgreSQL
  postgres-replica:
    image: postgres:15-alpine
    container_name: smartsports-postgres-replica
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PRIMARY_HOST=postgres-primary
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./scripts/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh
    depends_on:
      - postgres-primary
    ports:
      - "5433:5432"
    networks:
      - smartsports-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # PgBouncer connection pooler
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: smartsports-pgbouncer
    restart: unless-stopped
    environment:
      - DATABASES_HOST=postgres-primary
      - DATABASES_PORT=5432
      - DATABASES_USER=${POSTGRES_USER}
      - DATABASES_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASES_DBNAME=${POSTGRES_DB}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=2000
      - DEFAULT_POOL_SIZE=50
    volumes:
      - ./config/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
    ports:
      - "6432:5432"
    depends_on:
      - postgres-primary
    networks:
      - smartsports-network

  # Primary Redis
  redis-primary:
    image: redis:7-alpine
    container_name: smartsports-redis-primary
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_primary_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - smartsports-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G

  # Redis Sentinel for high availability
  redis-sentinel:
    image: redis:7-alpine
    container_name: smartsports-redis-sentinel
    restart: unless-stopped
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./config/sentinel.conf:/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-primary
    ports:
      - "26379:26379"
    networks:
      - smartsports-network

  # Monitoring services
  prometheus:
    image: prom/prometheus:latest
    container_name: smartsports-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - smartsports-network

  grafana:
    image: grafana/grafana:latest
    container_name: smartsports-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - smartsports-network

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: smartsports-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - smartsports-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: smartsports-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/var/log/app:ro
    depends_on:
      - elasticsearch
    networks:
      - smartsports-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: smartsports-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - smartsports-network

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: smartsports-backup
    restart: "no"
    environment:
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /backup.sh
    depends_on:
      - postgres-primary
    networks:
      - smartsports-network

networks:
  smartsports-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_primary_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
